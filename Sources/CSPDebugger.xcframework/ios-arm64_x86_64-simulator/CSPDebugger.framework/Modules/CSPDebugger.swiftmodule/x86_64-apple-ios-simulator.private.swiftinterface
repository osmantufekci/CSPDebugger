// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CSPDebugger
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CSPDebugger
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class DebugManager {
  public static var instance: CSPDebugger.DebugManager
  public func printLog(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n", type: CSPDebugger.DebugLog.LogType = .none)
  public func write()
  public func read()
  public func export()
  public func showSettings()
  public func clearAll()
  public func share()
  public func showWebViewDebugger()
  public func closeWebViewDebugger()
  public func setWebView(_ webView: WebKit.WKWebView)
  public func runJS(_ script: Swift.String, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc deinit
}
public struct DebugLog : Swift.Encodable {
  public enum LogType : Swift.String, Swift.Encodable {
    case warning
    case error
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class DebugSettings : ObjectiveC.NSObject, Foundation.NSCoding {
  public static var shared: CSPDebugger.DebugSettings
  @objc required convenience public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
extension CSPDebugger.DebugLog.LogType : Swift.Equatable {}
extension CSPDebugger.DebugLog.LogType : Swift.Hashable {}
extension CSPDebugger.DebugLog.LogType : Swift.RawRepresentable {}
